// Generated by CoffeeScript 1.10.0
(function() {
  var NoLongMethods,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  module.exports = NoLongMethods = (function() {
    function NoLongMethods() {
      this.lintAST = bind(this.lintAST, this);
    }

    NoLongMethods.prototype.rule = {
      name: 'no_long_functions',
      message: 'Methods must not be longer than the given number of lines',
      level: 'error',
      value: 20,
      description: 'Checks for method length'
    };

    NoLongMethods.prototype.processFunction = function(code, api, name) {
      var firstLine, lastLine, max, ref;
      if (!code.body.expressions.length) {
        return;
      }
      max = (ref = api.config[this.rule.name]) != null ? ref.value : void 0;
      firstLine = code.locationData.first_line + 1;
      lastLine = code.locationData.last_line + 1;
      if (lastLine - firstLine > max) {
        this.errors.push(api.createError({
          context: name,
          message: "Functions must not be longer than " + max + " lines",
          lineNumber: firstLine,
          lineNumberEnd: lastLine
        }));
      }
      return this.lintNode(code.body, api);
    };

    NoLongMethods.prototype.lintNode = function(node, api, name) {
      if (name == null) {
        name = 'Anon';
      }
      node.traverseChildren(false, (function(_this) {
        return function(child) {
          switch (child.constructor.name) {
            case 'Code':
              return _this.processFunction(child, api, name);
          }
        };
      })(this));
    };

    NoLongMethods.prototype.lintAST = function(root, api) {
      return this.lintNode(root, api);
    };

    return NoLongMethods;

  })();

}).call(this);
